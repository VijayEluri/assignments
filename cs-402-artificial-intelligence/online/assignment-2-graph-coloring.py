#!/usr/bin/pythonimport copyadjacencent = {1: (3, 4, 5, 6),	2: (5, 6),	3: (1, 4, 5),	4: (1, 3, 6),	5: (1, 2, 3, 6),	6: (1, 2, 4, 5)}colors = ['Red', 'Green', 'Blue']def coloring_possible(graph):	for node in graph:		if node == None: return True	return Falsedef get_possible_colors(node, graph):	global colors	global adjacencent	possible_colors = colors	for neighbour in adjacencent[node]:		if graph[neighbour] in possible_colors: possible_colors.remove(graph[neighbour])	return possible_colorsdef dfs(node, graph):	global colors	global adjacencent# 	if graph[node] != None:# 		print 'DEBUG: current node', node, 'already colored'# 		return# 	print 'DEBUG: Current node', node# 	print 'DEBUG: Current graph', graph# 	global adjacencent# 	possible_colors = get_possible_colors(node, graph)# 	index = 0# 	if len(possible_colors) < 1:# 		return None# 	else:# 		print 'DEBUG: possible colors', possible_colors# 		print 'DEBUG: assigning', possible_colors[index]# 		graph[node] = possible_colors[index]# 	for neighbour in adjacencent[node]:# 		outcome = dfs(neighbour, graph)# 		if outcome == None:# 			index += 1# 			print 'DEBUG: index', index# 			print 'DEBUG possible colors', len(possible_colors)# 			if index == len(possible_colors):# 				return None# 			graph[node] = possible_colors[index]# 	return graph	print 'Called', graph, node# 	if graph[node] != None:# 		print 'alrady coloured'# 		return graph	tried_colors = []	possible_colors = get_possible_colors(node, graph)	if len(possible_colors) < 1:		print 'No possible colors, returning'		return None	index = 0	graph[node] = possible_colors[index]	print 'Possible colors right now', possible_colors	tried_colors.append(possible_colors[index])	for neighbour in adjacencent[node]:		if graph[neighbour] == None:			print 'Calling for', neighbour			outcome = dfs(neighbour, copy.deepcopy(graph))			if outcome == None:				print 'Returned from', neighbour				print 'current graph state', graph				index += 1				print 'possible colors', possible_colors, 'New index', index				if index == len(possible_colors) - 1:					return graph# 			if outcome == graph:# 				return graph# 	print graph, node# 	if node != None: return graph# 	if coloring_possible(graph) == False:# 		return graph# 	for color in colors:# 		print graph# 		graph[node] = color# 		if color_match(node, adjacencent[node], graph) == False:# 			for neighbour in adjacencent[node]:# 				graph = dfs(node, graph)# 				if coloring_possible(graph) == False:# 					return graphdef color_match(node, neighbours, graph):	for neighbour in neighbours:		if graph[node] == graph[neighbour]:			return True	return Falseif __name__ == '__main__':	graph = dict(zip([x for x in range(1, 7)], [None for x in range(1, 7)]))	out = dfs(1, graph)	print out